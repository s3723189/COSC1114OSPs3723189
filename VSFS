#!/usr/bin/python3
from os import read, write
import sys
import os.path
import os
import stat
from pwd import getpwuid
from grp import getgrgid
import datetime

#Implementation by Gabriel Cary Lat (s3723189)
#Attempted up to DI

class File_Note:
    def __init__(self, path):
        splitter = path.rsplit("/",1)
        dir = "root"
        if path.find("/") > 0:
            dir = splitter[0]
        self.dir = dir
        self.name = splitter[-1]
        self.notes = []
        self.is_deleted = False

    def __str__(self):
        return "File"

def main():
    arg = sys.argv  

    #RootDirectory 
    arg_len = len(arg) - 1
    
    if arg_len < 2:
        stderr.write("Invalid command arguments \n")
        exit(-1)
    if ".notes" not in arg[2][-6:]:
        arg[2] = arg[2] + ".notes"
    validate_fs(arg[2])
    if arg_len == 4:
        if arg[1].lower() == 'copyin':
            validate_arg_length(arg[4])
            copyin(arg[2], arg[3], arg[4])
        elif arg[1].lower() == 'copyout':
            copyout(arg[2], arg[3], arg[4])

        else:
            stderr.write("Invalid command arguments\n")
            exit(1)
    elif arg_len == 3:
        if arg[1].lower() == "mkdir":
            validate_arg_length(arg[3])
            mkdir(arg[2], arg[3])
        elif arg[1].lower() == "rm":
            rm(arg[2],arg[3])
        elif arg[1].lower() == "rmdir":
            rmdir(arg[2], arg[3])
        else:
            stderr.write("Invalid command arguments\n")
            exit(1)
    elif arg_len == 2:
        if arg[1].lower() == "defrag":
            
            defrag_fs(arg[2])
        elif arg[1].lower() == "list":
            list_FS(arg[2])
        else:
            stderr.write("Invalid command arguments \n")
            exit(1)
    else:
            stderr.write("Invalid command arguments \n")
            exit(1)
    exit(0)

stderr = sys.stderr
#List of directories
directories = ["root"]

#Used for the filesystem that is being read
#Every line is an element
read_filesystem = []

#Store information of notes
notes = []

#Check if directory is valid
def validate_directory(path, mk = False):
    
    dir = path
    valid = False
    parent_dir = False
    
    #If ID from command line and has / at the beginning
    #Remove first char
    if path[0] == "/":
        dir = path[1:]
    #Remove first ("=") and last character ("/")
    if path[0] == "=" and path[-1] == "/":

        dir = path[1:]
        dir = dir[:-1]
    
    #Checks if the directory being validated is a sub directory
    if dir.find("/") > 0:
        parent_dir = True
    
    dir_split = dir.rsplit('/',1)
    parent_dir_path = dir_split[0]
    
    #Check if the directory's parent dir exists
    if parent_dir:
        if parent_dir_path in directories and dir not in directories:
            directories.append(dir)
            #for mkdir, if parent dir doesnt exist, create parent dir
            if mk == True:
                read_filesystem.append("=" + dir + "/" +"\n")
            valid = True
    else:
        if dir not in directories:
            directories.append(dir)
            if mk == True:
                read_filesystem.append("=" + dir + "/" + "\n")
            valid = True
    
    
    return valid

def validate_arg_length(arg):
    
    if len(arg) > 254:
        stderr.write("Command argument to long \n")
        exit(1)
    

def valid_external_dir(file_name, cout = False):
    boolean = False
    #dir cannot end with /
    
    if file_name[-1] == "/":
        stderr.write("Invalid external directory")
        exit(1)
    #Check if the path exists for copyout 
    if cout == True:
        path = file_name.rsplit("/",1)
        if len(path) == 1:
            return True
        # Check if path exists
        if os.path.isdir(path[0]):
            
            return True
        else:
            return False
        
    #Check if the file exists for copyin 
    if file_name[0] != "/":
        
        path = "./" + file_name 
    else:
        
        path = file_name
    
    if not os.path.isfile(path):

        stderr.write("No such external file or directory \n")
        exit(1)
    
    boolean = os.path.isfile(path)

    return boolean


#Validate the file system

def validate_fs(file_system):
    
    
    name = file_system 

    if not os.path.isfile(name):
        stderr.write("Error code 1: Invalid VSFS \n")
        exit(1)
        

    with open(name) as f:
        lines = f.readlines()

        in_file = False

        #Check first line if valid .notes file
        # As "NOTES V1.0" is required
        if lines[0].strip() != "NOTES V1.0":
            stderr.write("Invalid VSFS - This is not a notes file\n")
            exit(1)
            
        del lines[0]

        for line in lines:
            
            #Invalid file 
            if len(line[1:].strip()) > 255:
                stderr.write("Invalid VSFS - record exceeds 255 character \n")
                exit(1)

            if line[0] != "@" and line[0] != " " and line[0] != "=" and line[0] != "#":
                stderr.write("Invalid VSFS - Invalid format\n")
                exit(1)

            if line[0] == "@":
                
                if in_file == True:
                    notes.append(file)
                    in_file = False
                
                string = line[1:].strip()
                for note in notes:
                    note_string = note.dir + "/" + note.name
                    if string == note_string:
                        
                        stderr.write("Invalid VSFS - Duplicate note/file \n")
                        exit(1)
                

                if not note_exists(line.strip()[1:]):
                    
                    stderr.write("Invalid VSFS - Invalid note \n")
                    exit(1)
                if in_file == False and note_exists(line.strip()[1:]) == True:
                    
                    file = File_Note(line.strip()[1:])
                    
                    in_file = True

            if line[0] == " " and in_file == True:
                
                
                string = line.strip()[:254] + '\n'
                
                
                file.notes.append(string)

            if line[0] == "=" and line.strip()[-1] == "/":
                dir = line.strip()
                if not validate_directory(dir) or dir in directories:
                    stderr.write("Invalid VSFS - Invalid directory\n")
                    exit(1)
                
                if in_file == True:
                    notes.append(file)
                    in_file = False
            if len(line) < 255:
                read_filesystem.append(line)
            else:
                read_filesystem.append(line[:255] + "\n")

        f.close()
        
        if in_file == True:
            notes.append(file)
            in_file = False

    
                    

#Update the filesystem's file 
#Later used for defrag

def defrag_fs(file_system):
    name = file_system 
    
    #Sort the directories
    #Put home dir at beginning
    directories.sort()
    directories_updated = [x for x in directories if "#" not in x]
    directories_updated.remove("root")
    directories_updated.insert(0,"root")
    
    with open(name, 'w') as f:
        f.write("NOTES V1.0\n")

        for dir in directories_updated:
            #Print dir names if not home/root
            if dir != "root":
                dir_string = "=" + dir + "/\n"
                
                if dir[0] == "#":
                    
                    dir_string = dir + "/ \n"
                f.write(dir_string)
                
                path = dir 
                
                #Writing notes to FS 
                for note in notes:
                    if note.dir == path:
                        note_string = "@" + path + "/" + note.name + "\n"  
                        f.write(note_string)
                        for record in note.notes:
                            note_string = " " + record 
                            f.write(note_string)
            else:
                #Same as above instead
                #Prevents root files from writing @root/file_name
                for note in notes:
                    
                    if note.dir == "root":
                            note_string = "@" + note.name + "\n"
                            f.write(note_string)
                            for record in note.notes:
                                note_string = " " + record 
                                f.write(note_string)
        f.close()


                        
def update_fs(file_system):
    
    #Iterate over the notes 
    for note in notes:
        #Check if the note is deleted
        if note.is_deleted == True:
            index = 0
            note_string = "@" + note.dir + "/" + note.name
            #set a string to the note's appearance in the .notes file
            #if note is in root, dont add root to string
            if note.dir == "root":
                note_string = "@" + note.name
            note_read = False
            for line in read_filesystem:
                #If string is the same as the line in the file read
                #Add '#' to the start of that line as it is deleted
                if note_read == True and line[0] != " ":
                    note_read = False
                if note_string == line.rstrip():
                    if note.dir != "root":
                        read_filesystem[index] = "#" + note.dir + "/" + note.name + "\n"
                    else:
                        read_filesystem[index] = "#" + note.name + "\n"
                    note_read = True
                
                #Delete all content records by appending "#" at the beginning of the string
                if line[0] == " " and note_read == True:
                    
                    read_filesystem[index] = "#" + read_filesystem[index][1:]

                

                index += 1
            
    
    for dir in directories:
        index = 0
        for line in read_filesystem:
            
            #let string equal to how the dir looks in .notes
            dir_string = "=" + dir.rstrip() + "/"
            if dir[0] == "#":
                dir_string = "=" + dir[1:].rstrip() + "/"
            
            #If dir is deleted then append "#" at the beginning
            #else add "=" 
            if dir_string == line.rstrip("\n"):
                if dir[0] != "#":
                    read_filesystem[index] = "=" + dir + "/" + "\n"
                else:
                    read_filesystem[index] = dir + "/" + "\n"
                

            
            index += 1

    name = file_system 
    
    #Update the .notes file
    with open(name, 'w') as f:
        f.write("NOTES V1.0\n")

        for line in read_filesystem:
            
            f.write(line)

        f.close()

    return 0



            


#List fs

def list_FS(file_system): 
    name = file_system
    valid_external_dir(name)
    
    #Get File Attributes
    file_owner = os.stat(name).st_uid
    file_group = os.stat(name).st_gid
    file_owner = getpwuid(file_owner).pw_name
    file_group = getgrgid(file_group).gr_name
    time_created = os.path.getmtime(name)
    time_formatted = datetime.datetime.fromtimestamp(time_created)
    time_formatted = time_formatted.strftime('%b %d %H:%M')
    
    groups_att = return_file_perms(name)

   

    #Sort directories, let root/home dir be first 
    directories.sort()
    directories_updated = [x for x in directories if "#" not in x]
    directories_updated.remove("root")
    directories_updated.insert(0,"root")
    
    
    for dir in directories_updated:
        #Link is the number of subdirs if dir else 1 for note/file
        links = len([x for x in directories if x[0:len(dir)] == dir]) - 1
        if links == 0:
            links = 1
        
        #Size of dir is total size of files
        
        size = get_dir_size(dir)
        
        if dir != "root":
            string = f"d{groups_att} {links} {file_owner} {file_group} {size} {time_formatted} {dir}"
            print(string)

        for note in notes:
            if note.dir == dir:
                links = 1
                #Size is number of lines in content
                size = len(note.notes)
                if dir != "root":
                    string = f"-{groups_att} {links} {file_owner} {file_group} {size} {time_formatted} {dir}/{note.name}"
                else:
                    string = f"-{groups_att} {links} {file_owner} {file_group} {size} {time_formatted} {note.name}"
                print(string)
            
#Format the file's attribute permissions
def return_file_perms(path):
    # Group perms ie. --------- First 3 is owner, second is group, third is others

    fs_att = ""
    perms = os.stat(path).st_mode
    if(perms & stat.S_IRUSR):
        fs_att += "r"
    else:
        fs_att += "-"
    
    if(perms & stat.S_IWUSR):
        fs_att += "w"
    else:
        fs_att += "-"
    
    if(perms & stat.S_IXUSR):
        fs_att += "x"
    else:
        fs_att += "-"

    if(perms & stat.S_IRGRP):
        fs_att += "r"
    else:
        fs_att += "-"
    
    if(perms & stat.S_IWGRP):
        fs_att += "w"
    else:
        fs_att += "-"
    
    if(perms & stat.S_IXGRP):
        fs_att += "x"
    else:
        fs_att += "-"
    if(perms & stat.S_IROTH):
        fs_att += "r"
    else:
        fs_att += "-"
    
    if(perms & stat.S_IWOTH):
        fs_att += "w"
    else:
        fs_att += "-"
    
    if(perms & stat.S_IXOTH):
        fs_att += "x"
    else:
        fs_att += "-"
    
    return fs_att



def copyin(fs_name,external_file, interal_file):
    
    in_valid = in_file_exists(interal_file)
    out_valid = valid_external_dir(external_file)
    
        
    if not in_valid:
        stderr.write("Invalid internal file name \n")
        exit(1)

    if not out_valid:
        stderr.write("No such external file or directory \n")
        exit(1)
    edit_note(interal_file, external_file)
    
    update_fs(fs_name)

    
    return 0

def copyout(fs_name, internal_file, external_file):
    in_valid = in_file_exists(internal_file, cout = True)
    out_valid = valid_external_dir(external_file, cout = True)
    
    if not in_valid:
        stderr.write("Internal File does not exist \n")
        exit(1)

    if not out_valid:
        stderr.write("No such external file or directory \n")
        exit(1)

    note = get_note(internal_file)

    with open(external_file, 'w') as f:
        for record in note:
            f.write(record)


        f.close()


    update_fs(fs_name)
    return 0

def rm(fs_name, internal_file, is_mkdir = False):
    
    in_valid = in_file_exists(internal_file, cout = True)
    
    if not in_valid:
        stderr.write("Internal File does not exist \n")
        exit(-1)
    is_path = False
    if internal_file.find("/") > 0:
        is_path = True

    #Split the last occurence of /
    #Therefore splitting into file and path
    splitter = internal_file.rsplit("/", 1)
    file_name = splitter[-1]
    file_path = splitter[0]

    #If the internal_file does not have a path, assume dir is root/home
    if file_path == file_name and is_path == False:
        file_path = "root"
    #Delete notes which have the same directory
    for note in notes:
        if note.dir == file_path and note.name == file_name:
            note.is_deleted = True
            
            break
    if not is_mkdir:
        update_fs(fs_name)

def rmdir(fs_name, internal_path):

    exists = validate_directory(internal_path)

    if exists:
        print("Directory does not exist")
        exit(1)
    if internal_path == "root":
        print("Invalid directory name")
        exit(1)
    path = internal_path
    if path[0] == "/":
        path = path[1:]
    #Split deleted dir
    splitter = path.split("/")
    #Checks if the deleted dir has sub directories
    #Iterate over notes and deletes notes if it has 
    #deleted dir or its subdir
    for note in notes:
        
        if path in note.dir:
            note_path = note.dir + "/" + note.name
            
            splitter_2 = note_path.split("/")
            same_dir = True
            i = 0
            for element in splitter:
            
                
                if len(splitter) > len(splitter_2):
                    same_dir = False
                    break

                if element != splitter_2[i]:
                    
                    same_dir = False
                i += 1
            if same_dir:
                rm(fs_name, note_path, is_mkdir=True)

   
    dir_index = 0
    for dir in directories:
        #Splits the file's directories by "/" and every dir in directories
        #Loop over File's splitted directories from the beginning
        #If the element of the split is the same as the dir in directories
        #Remove from file
        i = 0
        same_dir = True
        for element in splitter:
            splitter_2 = dir.split("/")
            
            if len(splitter) > len(splitter_2):
                
                same_dir = False
                break
            
            if element != splitter_2[i]:
                
                same_dir = False
            i += 1
        if same_dir:
        
           directories[dir_index] = "#" + dir
        
        dir_index += 1

    

    update_fs(fs_name)

    return 0

def mkdir(file_system, internal_directory):
    
    valid = False
    dir = internal_directory
    
    if internal_directory[0] == "/":
        dir = internal_directory[1:]
    string_path = ""
    splitter = dir.split("/")
    #Separate the dir from it's parent dir
    #For every link (parent dir) it has, loop and
    #Validate and add if it does not exist 

    string_path = splitter[0]
    splitter = splitter[1:]
    valid = validate_directory(string_path, mk=True)
    for i in splitter:
        string_path += "/" + i
        
        valid = validate_directory(string_path, mk = True)
        
    if valid == False:
        stderr.write("Directory already exists \n")
        exit(1)


    update_fs(file_system)
    
    return 0 



#Edit notes
def edit_note(path, external_file):
    
    splitter = path.rsplit("/", 1)
    #Separate name and path
    file_name = splitter[-1]
    file_path = splitter[0]
    is_path = False
    if path.find("/") > 0:
        is_path = True
    updated_note = []
    if file_path == file_name and not is_path:
        file_path = "root"
    #Write updated content
    with open(external_file) as f:
        lines = f.readlines()

        for line in lines:
            updated_note.append(line.strip())
        f.close()
    #Delete note if exists
    for note in notes:
        if file_path == note.dir and file_name == note.name:

            #note.notes = updated_note
            delete_note(note) 
            
    #Append to read_filesystem
    note_string = "@" + file_name
    if file_path != "root":
        
        note_string = "@" + file_path + "/" + file_name 
    
    read_filesystem.append(note_string + "\n")

    for line in updated_note:
        read_filesystem.append(" " + line[:254] + "\n")
    return updated_note

def get_dir_size(dir):
    size = 0
    #Get size of notes in dir
    
    for note in notes:
        if note.dir[0:len(dir)] == dir and dir != "root":
            size += len(note.notes)
        elif dir == "root":
            size += len(note.notes)
    
    return size


#Delete note

def delete_note(note):
    #Find note in read_filesystem by looping
    #and comparing name as found in filesystem
    #Then delete by adding "#" to file name and content
    file_path = "@" + note.name
    file_read = False
    if note.dir != "root":
        file_path = "@" + note.dir + "/" + note.name
    i = 0
    for line in read_filesystem:
        
        if file_read == True and line[0] == " ":
            read_filesystem[i] = "#" + line[1:]

        if file_read == True and line[0] != " ":
            break
        
        if line.rstrip() == file_path:
            read_filesystem[i] = "#" + read_filesystem[i][1:]
            file_read = True

        
        i += 1


#Check if the file exists
def in_file_exists(path, cout = False):
    valid = False
    is_path = False

    if path[-1] == "/" or path[-2:] == ".." or path[-1] == ".":
        stderr.write("Invalid internal file name \n")
        exit(1)

    if path.find("/") > 0:
        is_path = True
    splitter = path.rsplit("/", 1)
    file_name = splitter[-1]
    file_path = splitter[0]

    if file_path == file_name and is_path == False:
        file_path = "root"
    
    

    if file_path  in directories and cout == False:
        valid = True
    
    if cout == True:
        for note in notes:
            if note.dir == file_path and note.name == file_name:
                valid = True

    return valid



#Check if the note exists
def note_exists(path):
    valid = True
    is_path = False
    if path.find("/") > 0:
        is_path = True

    splitter = path.rsplit("/", 1)
    file_name = splitter[-1]
    file_path = splitter[0]
    
    #If the file is not a path, then it is a root/home file
    if file_path == file_name and is_path == False:
        
        file_path = "root"
    
    #Check if note exists in notes
    for i in notes:
        if i.name == file_name and i.dir == file_path:
            
            valid = False
    #Extra validation if file_path is valid
    if file_path not in directories:
       
        valid = False
    return valid

    
#Get file/note get a file from the directory

def get_note(path):
    note = []
    splitter = path.rsplit("/", 1)
    file_name = splitter[-1]
    file_path = splitter[0]

    if file_path == file_name:
        file_path = "root"
    
    for i in notes:
        if i.name == file_name and i.dir == file_path:
            note = i.notes
            
            break
    
    return note
            

    
if __name__ == "__main__":
    main()

