#!/usr/bin/python3
from os import read, write
import sys
import os.path


class File_Note:
    def __init__(self, name, directory):
        
        self.dir = directory
        self.name = name
        self.notes = []

    def __str__(self):
        return "File"
        
    
class Directory:
    def __init__(self, name, parent_directory = None):
        
        self.name = name
        self.parent = parent_directory
        self.files = []

    def append_file(self, file):
        self.files.append(file)

    def __str__(self):
        return "Directory"

    #returns directory or regular file
    def get_file(self, file_name):
        
        for element in self.files:
            if element.name == file_name:
                return element
        
        return None 

    def has_file(self, file_name):    
        for element in self.files:
            if element.name == file_name:
                return True
        
        return False 
    
    

    def go_to_parent(self):
        return self.parent



#RootDirectory



root = Directory(name = "root")

def main():
    arg = sys.argv  

    #RootDirectory 
    


    validate_fs(arg[2])
    arg_len = len(arg) - 1
    
    if arg_len == 4:
        if arg[1].lower() == 'copyin':
            copyin(arg[2], arg[3], arg[4])

def copyin(fs_name, external_file, interal_file):
    
    global root


    ext_valid = check_file(external_file)
    
    if_valid, if_file_name = check_if_exist(interal_file)
    print(ext_valid, if_valid)
    if not ext_valid or not if_valid:
        return
    splitter = external_file.split("/")
    
    
    internal_splitter = interal_file.split("/")
    int_dir = internal_splitter[:-1]
    
    

    notes = write_as_note(external_file)

    

    for i in int_dir:
        if root.has_file(i):
            root = root.get_file(i)

    root.get_file(if_file_name).notes = notes


    to_root()


    list_fs()
    return 0


#Check if file name is in system.

def check_if_exist(path):
    global root
    valid = False
    
    if path == "." or path == ".." or path == "/":
        return False
    if path[0] == "/":
        path = path[1:]
    file_name = path
    if path.find("/") > 0:
        splitter = path.split("/")
        directories = splitter[:-1]
        file_name = splitter[-1]

        for i in directories:
            if root.has_file(i):
                root = root.get_file(i)
            else:
                return False

    if root is not None and root.has_file(file_name):
        valid = True

    to_root()
    return valid , file_name

    
        
        


#Check if directory is valid before filesystem is used


def validate_file(path):
    
    valid = True
    cur_dir = root
    read_file = path.split("/")
    file = read_file[-1]

    
    directories = read_file[:-1]
    
    for i in directories:
        
        if cur_dir.has_file(i):
            
            cur_dir = cur_dir.get_file(i)
        else:
            valid = False
    
    if cur_dir.has_file(file):
        valid = False
    

    to_root()

    return valid
    
def delete_file(directory, file):
    index = 0
    for i in directory.files:
        
        if i.name == file:
            del directory.files[i]
            break
        i += 1

def list_fs():
    global root
    
    for i in root.files:
        print(i.name)
    
    print(root.files[2].notes)

    
    to_root()

def write_as_note(external_file):
    note = []
    with open(external_file) as f:
        lines = f.readlines()
        
        for line in lines:
            #Make sure record is only 255 a line 
            string = line[:255]
            note.append(string)


        

        f.close()

    return note 



def add_file_to_fs(path, ext_file):
    global root
    read_file = path.split("/")
    
    file = read_file[-1]

    
    directories = read_file[:-1]
    
    for i in directories:
        
        if root.name == i:
            break
        else:
            root = root.get_file(i)

    if root.has_file(file):
        return False
    root.files.append(ext_file)

    to_root()

    return True



#Fix this
def add_dir_to_fs(path):
    global root
    
    dir_name = path[1:]
    dir_name = dir_name[:-1]
    dir_name = dir_name[:-1]


    directories = dir_name.split("/")
   
    for i in directories[:1]:
        if not root.has_file(i):
            root.append_file(Directory(i, root))
        
        root = root.get_file(i)

    if root.has_file(directories[-1]):
        to_root()
        return False
    
    

    to_root()
        
    
    return True



def to_root():
    global root
    while root.parent is not None:
        root = root.go_to_parent()


   
    return 0




#
def check_file(file_name):
    boolean = False
    
    if not file_name.find("/"):
        
        path = "./" + file_name 
    else:
        
        path = file_name
        
    stderr = sys.stderr

    if not os.path.isfile(path):

        stderr.write("Error code 1: No such file or directory \n")
        return False
    
    boolean = os.path.isfile(path)

    return boolean
    
#this method validates the file system inputted
def validate_fs(file_system):
    global root
    stderr = sys.stderr
    name = file_system + ".notes"
    directories = []
    base_dir = "root"
    read_files = []
    
    if not os.path.isfile(name):
        
        stderr.write("Error code 1: No such file or directory \n")
        return -1
    

    with open(name) as f:
        in_file = False
        
        lines = f.readlines()
        
        if lines[0].strip() != "NOTES V1.0":
            stderr.write("Error code 1: Invalid filesystem format \n")
            return -1 

        del lines[0]
        
        for line in lines:
            
            if line[0] == "@" :
                #Check if there is a directory associated
                
                file_entry = line[1:].strip()
                if in_file == True:
                    
                    add_file_to_fs(previous_entry, file)
                    in_file = False

                if in_file == False:
                    
                    if not validate_file(file_entry):
                        
                        stderr.write("Error code 1: Invalid file \n")
                        #return -1
                    else:
                        
                        file = File_Note(file_entry.split("/")[-1], "test")
                        
                        in_file = True
                        previous_entry = file_entry
                




            if line[0] == " " and in_file == True:
               
                file.notes.append(line[1:])
            


            if line[0] == "=" and line.strip()[-1] == "/":
               
                add_dir_to_fs(line)
                if in_file == True:
                    
                    add_file_to_fs(previous_entry, file)
                    in_file = False


                
                
        f.close()
        print("Validated successfully")
                
                

                

    return directories




if __name__ == "__main__":
    main()


    

