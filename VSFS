#!/usr/bin/python3
from os import read
import sys
import os.path


class File_Note:
    def __init__(self, name, directory):
        self.dir = directory
        self.name = name
        self.notes = []
        
    
class Directory:
    def __init__(self, name, parent_directory = None):
        
        self.name = name
        self.parent = parent_directory
        self.files = []

    def append_file(self, file):
        self.files.append(file)

   

    #returns directory or regular file
    def get_file(self, file_name):
        
        for element in self.files:
            if element.name == file_name:
                return element
        
        return None 

    def has_file(self, file_name):    
        for element in self.files:
            if element.name == file_name:
                return True
        
        return False 
    
    def go_to_parent(self):
        return self.parent



#RootDirectory



root = Directory(name = "root")

def main():
    arg = sys.argv  

    #RootDirectory 
    


    validate_fs(arg[2])
    arg_len = len(arg) - 1
    
    if arg_len == 4:
        if arg[1].lower() == 'copyin':
            copyin(arg[2], arg[3], arg[4])

def copyin(fs_name, external_file, interal_file):
    

    check_file(external_file)
        

    return 0


#Find file in directory

def validate_file(path):
    has_file = False
    cur_dir = root
    read_file = path.split("/")
    file = read_file[-1]

    
    directories = read_file[:-1]

    for i in directories:
        
        if cur_dir.has_file(i):
            cur_dir = cur_dir.get_file(i)

    if cur_dir.has_file(file):
        has_file = True


    return has_file
    








#
def check_file(file_name):
    boolen = False
    
    if not file_name.find("/"):
        
        path = "./" + file_name 
    else:
        
        path = file_name
        
    stderr = sys.stderr

    if not os.path.isfile(path):

        stderr.write("Error code 1: No such file or directory \n")
        return False
    
    boolean = os.path.isfile(path)

    return boolean
    
#this method validates the file system inputted
def validate_fs(file_system):
    stderr = sys.stderr
    name = file_system + ".notes"
    directories = []
    base_dir = "root"
    read_files = []
    files = []
    if not os.path.isfile(name):
        
        stderr.write("Error code 1: No such file or directory \n")
        return -1
    

    with open(name) as f:
        in_file = False
        
        lines = f.readlines()
        
        if lines[0].strip() != "NOTES V1.0":
            stderr.write("Error code 1: Invalid filesystem format \n")
            return -1 

        del lines[0]
        
        for line in lines:
            if line[0] == "@" :
                #Check if there is a directory associated
                file_entry = line.strip()        
                if in_file == False:
                    if not validate_file(file_entry):
                        stderr.write("Error code 1: Invalid file \n")
                        return -1
                    file = File_Note(name, file_entry.split("/")[-1])
                    in_file = True
                else:
                    root.append_file(file)
                    in_file = False




            if line[0] == " " and in_file:
                file.notes.append(line[1:])
            


            if line[0] == "=" and line.strip()[-1] == "/":
                dir_name = line[1:]
                dir_name = dir_name[:-1]
                dir_name = dir_name[:-1]
                print(f"directory {dir_name}")
                directories.append(dir_name)
                in_file = False
                

            for i in files:
                print(i.notes)

                
                

                

    return directories, files




if __name__ == "__main__":
    main()


    

