#!/usr/bin/python3
from os import read, write
import sys
import os.path




class File_Note:
    def __init__(self, path):
        splitter = path.rsplit("/",1)
        dir = "root"
        if path.find("/") > 0:
            dir = splitter[0]
        self.dir = dir
        self.name = splitter[-1]
        self.notes = []
        self.is_deleted = False

    def __str__(self):
        return "File"

def main():
    arg = sys.argv  

    #RootDirectory 
    arg_len = len(arg) - 1
    
    validate_fs(arg[2])
    if arg_len == 4:
        if arg[1].lower() == 'copyin':
            
            copyin(arg[2], arg[3], arg[4])
        if arg[1].lower() == 'copyout':
            copyout(arg[2], arg[3], arg[4])
    elif arg_len == 3:
        if arg[1].lower() == "mkdir":
            mkdir(arg[2], arg[3])
        if arg[1].lower() == "rm":
            rm(arg[2],arg[3])
        if arg[1].lower() == "rmdir":
            rmdir(arg[2], arg[3])
    elif arg_len == 2:
        if arg[1].lower() == "defrag":
            print("ASDASDASD")
            update_fs(arg[2])


    
stderr = sys.stderr
directories = ["root"]
read_filesystem = []
notes = []
#Check if directory is valid
def validate_directory(path):
    
    dir = path
    valid = False
    parent_dir = False
    #Remove first ("=") and last character ("/")
    if path[0] == "=" and path[-1] == "/":

        dir = path[1:]
        dir = dir[:-1]
    
    #Checks if the directory being validated is a sub directory
    if dir.find("/") > 0:
        parent_dir = True

    dir_split = dir.rsplit('/',1)
    
    if parent_dir:
        if dir_split[0] in directories and dir not in directories:
            directories.append(dir)
            valid = True
    else:
        if dir not in directories:
            directories.append(dir)
            valid = True

    return valid


def valid_external_dir(file_name):
    boolean = False
    
    if file_name[0] != "/":
        
        path = "./" + file_name 
    else:
        
        path = file_name
        
    

    if not os.path.isfile(path):

        stderr.write("Error code 1: No such external file or directory \n")
        return False
    
    boolean = os.path.isfile(path)

    return boolean


#Validate the file system

def validate_fs(file_system):
    stderr = sys.stderr
    
    name = file_system + ".notes"

    if not os.path.isfile(name):
        stderr.write("Error code 1: No such internal file or directory \n")
        return -1

    with open(name) as f:
        lines = f.readlines()

        in_file = False


        if lines[0].strip() != "NOTES V1.0":
            stderr.write("Error code 1: Invalid filesystem format \n")
            return -1 
        del lines[0]

        for line in lines:
            if line[0] == "@":
                if in_file == True:
                    notes.append(file)
                    in_file = False


                if in_file == False and valid_note(line.strip()[1:]) == True:
                    
                    file = File_Note(line.strip()[1:])
                    print("approved")
                    print(file.name, file.dir)
                    in_file = True

            if line[0] == " " and in_file == True:
                
                
                string = line.strip()[:254] + '\n'
                
                
                file.notes.append(string)

            if line[0] == "=" and line.strip()[-1] == "/":
                if not validate_directory(line.strip()):
                    stderr.write("Error code 1: Invalid directory \n")
                if in_file == True:
                    notes.append(file)
                    in_file = False
            read_filesystem.append(line)

        f.close()
        print("done")
        if in_file == True:
            notes.append(file)
            in_file = False

    #print(read_filesystem)
    #print([i.name for i in notes])
                    

#Update the filesystem's file 
#Later used for defrag

def update_fs(file_system):
    name = file_system + ".notes"
    
   
    directories.sort()
    directories_updated = [x for x in directories if "#" not in x]
    directories_updated.remove("root")
    directories_updated.insert(0,"root")
    print(directories_updated)
    with open(name, 'w') as f:
        f.write("NOTES V1.0\n")

        for dir in directories_updated:
            if dir != "root":
                string = "=" + dir + "/\n"
                print(dir[0])
                if dir[0] == "#":
                    
                    string = dir + "/ \n"
                f.write(string)
                
                path = dir 
                
                
                for note in notes:
                    if note.dir == path:
                        string = "@" + path + "/" + note.name + "\n"  
                        f.write(string)
                        for record in note.notes:
                            string = " " + record 
                            f.write(string)
            else:
                for note in notes:
                    if note.dir == "root":
                            string = "@" + note.name + "\n"
                            f.write(string)
                            for record in note.notes:
                                string = " " + record 
                                f.write(string)
        f.close()

                        
def update_fs2(file_system):
    
    for note in notes:
        if note.is_deleted == True:
            index = 0
            string = "@" + note.dir + "/" + note.name
            if note.dir == "root":
                string = "@" + note.name
            note_read = False
            for line in read_filesystem:
                if note_read == True and line[0] != " ":
                    note_read = False
                if string == line.rstrip():
                    print("GOES IN")
                    read_filesystem[index] = "#" + note.dir + "/" + note.name + "\n"
                    note_read = True
                
                
                if line[0] == " " and note_read == True:
                    print("changed")
                    read_filesystem[index] = "#" + read_filesystem[index][1:]

                

                index += 1
            

    for dir in directories:
        index = 0
        for line in read_filesystem:
            
            
            
            string = "=" + dir[1:] + "/"
            if string == line.rstrip("\n"):
                read_filesystem[index] = dir + "/" + "\n"

            
            index += 1

    name = file_system + ".notes"
    
    with open(name, 'w') as f:
        f.write("NOTES V1.0\n")

        for line in read_filesystem:
            
            f.write(line)

        f.close()

    return 0



            


# copyin function

def copyin(fs_name,external_file, interal_file):
    
    in_valid = in_file_exists(interal_file)
    out_valid = valid_external_dir(external_file)
    
    if not in_valid or not out_valid:
        print("Error")
        return -1

    edit_note(interal_file, external_file)
    update_fs2(fs_name)

    
    return 0

def copyout(fs_name, internal_file, external_file):
    in_valid = in_file_exists(internal_file)
    out_valid = valid_external_dir(external_file)
    
    if not in_valid or not out_valid:
        print("Error")
        return -1

    note = get_note(internal_file)

    with open(external_file, 'w') as f:
        for record in note:
            f.write(record + "\n")


        f.close()



    return 0

def rm(fs_name, internal_file, is_mkdir = False):
    
    in_valid = in_file_exists(internal_file)
    
    if not in_valid:
        return -1
    is_path = False
    if internal_file.find("/") > 0:
        is_path = True
    
    


    splitter = internal_file.rsplit("/", 1)
    file_name = splitter[-1]
    file_path = splitter[0]

    if file_path == file_name and is_path == False:
        
        file_path = "root"
    for note in notes:
        if note.dir == file_path and note.name == file_name:
            note.is_deleted = True
            print("deleted")
            break
    if not is_mkdir:
        update_fs2(fs_name)

def rmdir(fs_name, internal_path):

    exists = validate_directory(internal_path)

    if exists:
        print("error")
        return -1
    path = internal_path
    if path[0] == "/":
        path = path[1:]
    
    
    for note in notes:
        if path in note.dir:
            note_path = note.dir + "/" + note.name
            rm(fs_name, note_path, is_mkdir=True)

    i = 0
    for dir in directories:
        
        if path in dir:
            
            
            directories[i] = "#" + dir
        i += 1
    

    print(directories)

    update_fs2(fs_name)

    return 0

def mkdir(file_system, internal_directory):
    if not validate_directory(internal_directory):
        print("error")
        return -1
    update_fs(file_system)
    return 0 


#Edit notes
def edit_note(path, external_file):
    
    splitter = path.rsplit("/", 1)
    file_name = splitter[-1]
    file_path = splitter[0]
    updated_note = []
    if file_path == file_name:
        file_path = "root"
    with open(external_file) as f:
        lines = f.readlines()

        for line in lines:
            updated_note.append(line.strip())
        f.close()

    for note in notes:
        if file_path == note.dir and file_name == note.name:

            #note.notes = updated_note
            delete_note(note) 
            print("EDITED")
    string = "@" + file_name
    if file_path != "root":
        string = "@" + file_path + "/" + file_name 
    print(read_filesystem[-1])
    print(string)
    read_filesystem.append(string + "\n")
    for line in updated_note:
        read_filesystem.append(" " + line + "\n")
    return updated_note



#Delete note

def delete_note(note):
    file_path = "@" + note.name
    file_read = False
    if note.dir != "root":
        file_path = "@" + note.dir + note.name
    i = 0
    for line in read_filesystem:
        
        if file_read == True and line[0] == " ":
            read_filesystem[i] = "#" + line[1:]

        if file_read == True and line[0] != " ":
            break
        if line.rstrip() == file_path:
            read_filesystem[i] = "#" + read_filesystem[i][1:]
            file_read = True

        
        i += 1



         
    


#Check if the file exists
def in_file_exists(path):
    valid = False
    is_path = False

    if path.find("/") > 0:
        is_path = True
    splitter = path.rsplit("/", 1)
    file_name = splitter[-1]
    file_path = splitter[0]

    if file_path == file_name and is_path == False:
        file_path = "root"
    
    

    if file_path  in directories:
        valid = True
    
    return valid



#Check if file is valid
def valid_note(path):
    valid = True
    is_path = False
    if path.find("/") > 0:
        is_path = True

    splitter = path.rsplit("/", 1)
    file_name = splitter[-1]
    file_path = splitter[0]
    
    
    if file_path == file_name and is_path == False:
        
        file_path = "root"
    
    for i in notes:
        if i.name == file_name and i.dir == file_path:
            
            valid = False
    
    if file_path not in directories:
       
        valid = False
    return valid

    
#Get file/note get a file from the directory

def get_note(path):
    note = []
    splitter = path.rsplit("/", 1)
    file_name = splitter[-1]
    file_path = splitter[0]

    if file_path == file_name:
        file_path = "root"
    
    for i in notes:
        if i.name == file_name and i.dir == file_path:
            note = i.notes
            
            break
    
    return note
            

    


if __name__ == "__main__":
    main()

